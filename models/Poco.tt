<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ Assembly Name="System.Data.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Globalization;
using Nias.Mentorkit.Data;

#pragma warning disable 1591
// namespace: Nias.Mentorkit.Data
//
// summary:	AutoGenerated POCO classes.
namespace Nias.Mentorkit.Models
{
<#
	List<string> ExcludedClassNames = new List<string>() { "file", "asx", "asxresource", "banner", "bannerresource", "application" };
         
	List<SchemaTable> tables = DatabaseSchemaAdapter.GetSchema(connectionString);

	foreach (SchemaTable table in tables)
    {
		if (ExcludedClassNames.Contains<string>(table.ClassName.ToLower()) == false)
		{
			//WriteLine("\t/// <summary> " + table.ClassName +" autogenerated POCO class. </summary>");

			WriteLine("\tpublic class " + table.ClassName);
			WriteLine("\t{");
		
			/*
			Write("\t\tprivate const string _objectStatement = \"");
		
			int index = 0;
	
			foreach (SchemaColumn column in table.Columns)
			{
				Write(column.VariableName + "={" + index + "} ");
				index++;
			}
		
			WriteLine("\";");
			WriteLine("");
			*/

			foreach (SchemaColumn column in table.Columns)
			{
		
				//WriteLine("\t\t/// <summary> Gets or sets the  " + column.VariableName + ". </summary>");
			
				if (column.IsKey == true)
				{
					WriteLine("\t\t[PrimaryKey]");
					//WriteLine("\t\t[Required(ErrorMessage = \"" + column.VariableName + " is required.\")]");
				}
			
				if (column.IsIdentity == true)
				{
					WriteLine("\t\t[Identity]");
					//WriteLine("\t\t[Required(ErrorMessage = \"" + column.VariableName + " is required.\")]");
				}
						
				if (column.DataType == typeof(System.String))
				{
					//WriteLine("\t\t[StringLength(" + column.CharacterMaximumLength + ", ErrorMessage = \"" + column.VariableName +" can not exceed " + column.CharacterMaximumLength + " characters.\")]");
				}
			
				string variablePostfix = "";
			
				if (column.IsNullable == true && column.DataType != typeof(System.String))
				{
					variablePostfix = "?";
				}
						
				WriteLine("\t\tpublic " + FormatTools.RemoveDefaultNamespaceFromVariableType(column.DataType.ToString()) + variablePostfix + " " + column.VariableName + " { get; set; }");
			}
		
			/*WriteLine("\t\t/// <summary> ToString override. </summary>");
		
			WriteLine("\t\tpublic override string ToString()");
			WriteLine("\t\t{");
		
			Write("\t\t\treturn string.Format(CultureInfo.InvariantCulture, _objectStatement");
		
			foreach (SchemaColumn column in table.Columns)
			{		
				Write(", " + column.VariableName);
			}
			WriteLine(");");
		
			WriteLine("\t\t}");
			*/
			WriteLine("\t}");
		}
    }
#>
}

#pragma warning restore 1591
<#@ include file="DatabaseCore.ttinclude" #>
